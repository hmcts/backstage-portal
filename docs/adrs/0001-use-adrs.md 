---
Title: Use Backstage + Plugins for SBOM Lifecycle Management
Date: 2025-09-16
Status: Proposed
Deciders: Alice Smith, Bob Johnson, Carol Lee
Technical Story: As part of our Software Supply Chain Assurance program, we need a system to track, display, and enforce SBOMs for all our services and artifacts.
---

## Context

We need to improve our SBOM (Software Bill of Materials) process across the organization to satisfy internal security policy, external customer requirements, and regulatory compliance. Key problems:

- SBOMs are currently generated by ad-hoc tools per team; format and quality vary.
- No central catalog or UI where SBOMs are visible, compared, or audited across teams.
- Policy enforcement (e.g. disallowed licenses, vulnerability thresholds) is inconsistent.
- Traceability (e.g. provenance, component versions, transitive dependencies) is incomplete or missing.

We evaluated several options:

- Continue with existing ad-hoc / team-by-team tools and manual spreadsheets or dashboards.
- Use a specialized commercial SBOM lifecycle / governance tool.
- Use Backstage (which we already have in some capacity) augmented by plugins/integrations to cover the gaps.

Constraints & requirements include:

- Must support *at least* SPDX and CycloneDX formats.
- Must generate SBOMs automatically in CI for containers, binaries, and services.
- Must enforce license / vulnerability policies at build time.
- Must provide dashboards / visibility for dev, security, and management stakeholders.
- Provenance metadata (source, build tool, version, date) must be captured.
- Scalable to our ~200 microservices, with frequent releases (~daily for some teams).

---

## Decision

We will adopt **Backstage + Plugins / Integrations** as the primary platform for SBOM lifecycle management. Specifically:

- Use existing SBOM generation tools (e.g. *Syft*, *CycloneDX CLI*) integrated into CI pipelines to generate SBOMs in (at least) SPDX & CycloneDX, with required metadata (component version, supplier/origin, build environment).
- Develop or reuse a Backstage plugin to ingest SBOM artifacts, validate their format & completeness, display them per-component in the Backstage Catalog, and show aggregated dashboards (missing SBOMs, policy violations, risk exposure).
- Integrate a vulnerability / license scanning tool (e.g. *VulnScannerX* or *OSS-LicenseChecker*) that can consume SBOMs or component inventories, to flag disallowed licenses or known vulnerabilities as part of build CI or PR pipelines.
- Establish policy enforcement gates: builds must fail / PRs must be blocked if SBOM is missing or fails validation; disallowed license dependencies or critical vulnerabilities cause build failure.
- Store provenance metadata, version SBOMs in artifact repository or source control together with the service/component metadata in Backstage.
- Assign ownership: each service/component team is responsible for integrating SBOM generation; the Platform / DevSecOps team will maintain and support the Backstage plugin and dashboards; Security / Compliance team will define license / vulnerability policy rules.

---

## Consequences

### Pros

- Centralized visibility: we will have one source of truth (Backstage) for SBOMs across all services.
- Leverage existing tool (Backstage) reduces onboarding overhead; developers already use it for other aspects of the service catalog.
- Policy enforcement built into CI helps shift-left; catches issues earlier.
- Standardization of formats and metadata improves consistency and auditability.
- Dashboards / historic SBOMs enable trend monitoring and risk analysis over time.

### Cons / Risks

- Plugin / integration work required: we will need to build or adapt SBOM ingestion / validation plugin(s), dashboards, etc. This will take initial investment.
- Dependency on external tools remaining up-to-date: scanners, format versions, vulnerability databases must be maintained.
- Some SBOM generation tools may not capture all transitive dependencies or runtime dependencies; risk of blind spots.
- Performance / scaling concerns: storing and processing many SBOMs, parsing, dashboards may require resource scaling or caching.
- Cultural change needed: teams must include SBOM generation in CI / build pipelines, maintain metadata discipline; risk of inconsistent adoption.

---

## Alternatives Considered

| Option | Reason For Rejecting |
|---|---|
| Continue with current ad-hoc tools & manual dashboards | Too inconsistent, lacks visibility & policy enforcement; high risk for compliance failures. |
| Purchase / adopt a specialized commercial SBOM governance product | Possibly better coverage out-of-box, but higher cost; more vendor lock-in; we already have Backstage with internal adoption momentum. |
| Build a custom SBOM portal separate from Backstage | Additional infrastructure & duplication of catalog / ownership model; would fragment visibility & require extra maintenance. |

---

## Related Decisions

- TBD: Decision on which scanning / license / vulnerability tool(s) to standardize on.
- Decision to standardize formats (SPDX, CycloneDX) and required metadata (component origin, version, build time etc.).
- Decision on storage / versioning strategy for SBOM artifacts (e.g., store in artifact repo, or alongside code, or in dedicated SBOM storage service).

---

## Status

Proposed â€” under review by DevSecOps, Security, and Platform Engineering.

